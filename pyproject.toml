[build-system]
build-backend = "hatchling.build"
requires = ["hatch-vcs", "hatchling"]

[project]
name = "django-lifespan"
dynamic = ["version"]
description = "Django application to handle ASGI Lifespan events"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["django"]
authors = [
  { name = "Christian Hartung", email = "hartung@live.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: Python",
]
dependencies = ["asgiref", "channels", "django"]

[project.urls]
Documentation = "https://github.com/hartungstenio/django-lifespan#readme"
Issues = "https://github.com/hartungstenio/django-lifespan/issues"
Source = "https://github.com/hartungstenio/django-lifespan"

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = ["django_lifespan", "tests"]

[tool.coverage.paths]
django_lifespan = ["*/django-lifespan/src/django_lifespan", "src/django_lifespan"]
tests = ["*/django-lifespan/tests", "tests"]

[tool.coverage.report]
exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "no cov",
]

[tool.deptry]
known_first_party = ["django_lifespan"]

[tool.hatch.build.targets.wheel]
sources = ["src"]

[tool.hatch.build.targets.sdist]
exclude = ["/.devcontainer", "/.github"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
dependencies = [
  "django-stubs>=4.2",
  "faker",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "pytest-django",
]

[tool.hatch.envs.default.scripts]
cov = [
  "cov-report",
  "test-cov",
]
cov-report = [
  "- coverage combine",
  "coverage report",
]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.tests.overrides]
matrix.django.dependencies = [
  { value = "django>=4.2,<5.0", if = ["4.2"] },
  { value = "django>=5.0,<5.1", if = ["5.0"] },
  { value = "django>=5.1,<5.2", if = ["5.1"] },
]

[[tool.hatch.envs.tests.matrix]]
django = ["4.2"]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[[tool.hatch.envs.tests.matrix]]
django = ["5.0", "5.1"]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.hatch-static-analysis]
config-path = "ruff_defaults.toml"
dependencies = [
  "deptry",
  "django-stubs>=4.2",
  "mypy",
  "pre-commit",
  "ruff==0.11.0",
]
skip-install = false

[tool.hatch.envs.hatch-static-analysis.scripts]
format-check = "ruff format{env:HATCH_FMT_ARGS:} --check --diff {args:.}"
format-fix = "ruff format{env:HATCH_FMT_ARGS:} {args:.}"
lint-check = [
  "ruff check{env:HATCH_FMT_ARGS:} {args:.}",
  "deptry .",
  "SKIP=no-commit-to-branch,ruff,ruff-format pre-commit run --all-files --verbose",
  "mypy --install-types --non-interactive {args:src/django_lifespan tests}",
]
lint-fix = [
  "ruff check{env:HATCH_FMT_ARGS:} --fix {args:.}",
  "deptry .",
  "SKIP=no-commit-to-branch,ruff,ruff-format pre-commit run --all-files --verbose",
  "mypy --install-types --non-interactive {args:src/django_lifespan tests}",
]

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "channels.*"
ignore_missing_imports = true
